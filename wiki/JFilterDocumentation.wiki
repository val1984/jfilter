#labels Featured
= JFilter Documentation =

Please note that word query and filter is used interchangeably in this document.

== Installation ==
 * Download latest JFilter version from download page.
 * Download Jackson core and mapper jars of version 1.9.0+ from http://wiki.fasterxml.com/JacksonDownload.
 * Add JFilter and Jackson jars in you project class path.

== Javadocs ==

[http://code.google.com/p/jfilter/source/browse/trunk/jfilter/src/main/java/gk/jfilter/JFilter.java JFilter]

== Overview ==
JFIlter library has only one class [http://code.google.com/p/jfilter/source/browse/trunk/jfilter/src/main/java/gk/jfilter/JFilter.java gk.jfilter.JFilter] to filter/query collections (java.util.Collection, java.util.Map or arrays). New instance of this class to be created for each collection. Then this instance can be used to execute queries multiple times on the collection.
Following are different ways to execute filter.
{{{

Collection<Pet> pets = new ArrayList<Pet>();
//populate pets collection

JFilter jfilter = new JFilter(pets, Pet.class);
Collection<Pet> cats = filter.filter("{'type':'?1'}", "CAT").out(new ArrayList<Pet>());
 
Collection<Pet> pets = new ArrayList<Pet>();
//populate pets collection

JFilter jfilter = new JFilter(pets, Pet.class);

Map<String, ?> parameters = new HashMap<String,String>();

parameters.put("type", "CAT"); 
Collection<Pet> cats = jfilter.filter("{'type':'?type'}", parameters).out(new ArrayList<Pet>());
 
parameters.put("type", "DOG"); 
Collection<Pet> dogs = jfilter.filter("{'type':'?type'}", parameters).out(new ArrayList<Pet>());
}}}

== Sample programs ==
 * [http://code.google.com/p/jfilter/source/browse/trunk/jfilter/src/test/java/gk/jfilter/sample/simple/Simple.java Simple sample]
 * [http://code.google.com/p/jfilter/source/browse/trunk/jfilter/src/test/java/gk/jfilter/sample/product Product sample]
 * [http://code.google.com/p/jfilter/source/browse/trunk/jfilter/src/test/java/gk/jfilter/sample/salesorder Sales order sample]

== How to write json filter ==

 * Class should have getter method for a property that is specified in json filter.
 * java.util.Collection and Map type properties should be parameterized e.g. `Map<String,List<String>>`.

 * Filter can contains non property methods which are non void and has zero arguments, e.g {'toString':'?1'}.

== Supported operators ==

|| *Operator* || *Description* || *Supported types* || *Comment* ||
|| $gt || Greater than|| All || ||
|| $ge || Greater than equals to || All || ||
|| $lt || Less than || All || ||
|| $le || Less than equals to || All || ||
|| $eq || Equals to || All || ||
|| $sw|| Same as String startsWith || String || This special operator is provided because JFilter supports methods without any arguments||
|| $ew || Same as String endsWith || String || This special operator is provided because JFilter supports methods without any arguments||
|| $cts || Same as String contails|| String || This special operator is provided because JFilter supports methods without any arguments||
|| $in || In || Collection, Array and Map|| ||
|| $nin || Not in || Collection, Array and Map|| ||
|| $and || AND || || used for join||
|| $or || OR || || used for join||

== Supported data types ==
 All primitives, `BigDecimal`, `BigInteger`, Boolean, Byte,  Calendar, Character, java.util.Date, Float, Integer, Long, Short, String, java.sql.Time, java.sql.Timestamp, URI, UUID

== How to use different data types ==

See the code of  [http://code.google.com/p/jfilter/source/browse/trunk/jfilter/src/test/java/gk/jfilter/test/datatype/DataTypesTest.java Data type test program]
== Parameterized filters ==

Parameterized filters are when you do not provide attributes value in json filter string for example {'id':'?id'}. Question mark is used to indicate that value will be given as argument of {{{JFilter.execute}}} method. There are two type of parameterized filters:

 * Type 1: In this type Filter parameters are written as {'attribute':'?string'} where "string" is any string. Parameter values are given as Map argument where Map key is "string" and value is object of type "attribute" specified in the filter. In case of operator $in and $nin values are given as List. 

Example:
{{{
JFilter<SalesOrder> filter = new JFilter<SalesOrder>(orders, SalesOrder.class);
Map<String, Integer> parameters = new HashMap<String, Integer>(1);
parameters.put("id", 10);
Collection<SalesOrder> fc = filter.filter("{ 'id':{'$le':'?id'}}", parameters).out(new ArrayList<SalesOrder>());
}}}
 
 * Type 2: In this type parameters are given as "?1", "?2" etc in the filter, starting from "?1" to "?n" where n is integer. Parameter values are are picked from corresponding argument position in the variable arguments of {{{JFilter.execute}}} method.


Example:
{{{
JFilter<SalesOrder> filter = new JFilter<SalesOrder>(orders, SalesOrder.class);
Collection<SalesOrder> fc = filter.filter("{ 'id':{'$le':'?1'}}", 10).out(new ArrayList<SalesOrder>());
}}}

JFilter does not support non parameterized queries.


== Non property method in a filter ==
You can use non property methods in a filter, the method must be non void and should be of zero argument.
Example:
{'toString':'?1'}

== Inherited properties and methods ==
JFilter supports inherited properties and method of any level. That means you can give inherited properties or methods in a filter.
See in the following example getClass() method of Object class is used in a filter.

Example:
 `{'getClass.getName':'eg.MyClass'}` - filter collection where class name is `"eg.MyClass".`